[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "My name is Sunmin Hong, and I’m a third year doctoral candidate in criminology and criminal justice program at UT Dallas.\n\nMore Information\nResearch Interests:\n\nCybercrimes\nCriminal Justice Policies\nEnvironmental Criminology\n\n\n\nContact me\n[sunmin.hong@utdallas.edu]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "assignment1.html",
    "href": "assignment1.html",
    "title": "assignment1",
    "section": "",
    "text": "Survey Link : https://utdallas.qualtrics.com/jfe/form/SV_5swnclalwY0ZIrk"
  },
  {
    "objectID": "assignment2.html",
    "href": "assignment2.html",
    "title": "assignment2",
    "section": "",
    "text": "Building a Qualtrics Panel\n\n(1) Use Google Trends website\n\n# Load required libraries\nlibrary(readr)\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n# Read the CSV file without parsing dates\ntrends_data &lt;- read_csv(\"multiTimeline.csv\", skip = 2, col_names = FALSE, \n                        col_types = cols(.default = \"c\"))\n\n# Rename columns\ncolnames(trends_data) &lt;- c(\"Time\", \"Trump\", \"Kamala_Harris\", \"Election\")\n\n# Print first few rows to check the data\nprint(head(trends_data))\n\n# A tibble: 6 × 4\n  Time                      Trump                  Kamala_Harris        Election\n  &lt;chr&gt;                     &lt;chr&gt;                  &lt;chr&gt;                &lt;chr&gt;   \n1 Time                      Trump: (United States) Kamala Harris: (Uni… Electio…\n2 2024-09-28T12:04:00-05:00 45                     11                   10      \n3 2024-09-28T12:12:00-05:00 41                     11                   10      \n4 2024-09-28T12:20:00-05:00 40                     10                   10      \n5 2024-09-28T12:28:00-05:00 50                     11                   11      \n6 2024-09-28T12:36:00-05:00 43                     11                   9       \n\n# Convert Time column to proper datetime format\n# Adjust the format based on your actual data\ntrends_data$Time &lt;- parse_date_time(trends_data$Time, orders = c(\"mdy HM\", \"ymd HM\"))\n\nWarning: All formats failed to parse. No formats found.\n\n# Date analysis\nstart_time &lt;- min(trends_data$Time, na.rm = TRUE)\n\nWarning in min.default(structure(c(NA_real_, NA_real_, NA_real_, NA_real_, : no\nnon-missing arguments to min; returning Inf\n\nend_time &lt;- max(trends_data$Time, na.rm = TRUE)\n\nWarning in max.default(structure(c(NA_real_, NA_real_, NA_real_, NA_real_, : no\nnon-missing arguments to max; returning -Inf\n\ntime_range &lt;- as.numeric(difftime(end_time, start_time, units = \"hours\"))\n\n# Interval analysis\nnumber_of_datapoints &lt;- nrow(trends_data)\ninterval &lt;- as.numeric(difftime(trends_data$Time[2], trends_data$Time[1], units = \"hours\"))\n\n# Print results\ncat(\"Date Analysis:\\n\")\n\nDate Analysis:\n\ncat(\"Start Time:\", format(start_time, \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\nStart Time: Inf \n\ncat(\"End Time:\", format(end_time, \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\nEnd Time: -Inf \n\ncat(\"Time Range:\", time_range, \"hours\\n\\n\")\n\nTime Range: -Inf hours\n\ncat(\"Interval Analysis:\\n\")\n\nInterval Analysis:\n\ncat(\"Number of Data Points:\", number_of_datapoints, \"\\n\")\n\nNumber of Data Points: 182 \n\ncat(\"Interval between data points:\", interval, \"hours\\n\")\n\nInterval between data points: NA hours\n\n\n\n\n\n(2) Use gtrendsR package to collect data\n\n# Load library\nlibrary(gtrendsR)\n\n# Fetch data\nHarrisTrumpElection &lt;- gtrends(keyword = c(\"Trump\", \"Harris\", \"election\"), time = \"all\")\n\n# Select data for plotting\nHarrisTrumpElection_interest &lt;- HarrisTrumpElection$interest_over_time\nHarrisTrumpElection_interest &lt;- na.omit(HarrisTrumpElection_interest)\n\n# Plot data\npar(family=\"Georgia\")\nplot(HarrisTrumpElection_interest$date, HarrisTrumpElection_interest$hits, type=\"l\",\n     main=\"Google Trends: Trump, Harris, Election\", xlab=\"Date\", ylab=\"Search Interest\")\n\nWarning in xy.coords(x, y, xlabel, ylabel, log): NAs introduced by coercion\n\n\n\n\n# Try another dataset\nborderimg &lt;- gtrends(keyword = c(\"border\", \"immigrant\"), time = \"all\")\n\n# Collect data by timeframe\nlast_hour &lt;- gtrends(keyword = c(\"Harris\", \"Trump\"), time = \"now 1-H\")\nlast_30_days &lt;- gtrends(keyword = c(\"Harris\", \"Trump\"), time = \"today 1-m\")\n\n# Collect data by country\ntg_gb &lt;- gtrends(keyword = c(\"immigrants\"), geo = c(\"GB\", \"US\"), time = \"all\")\n\n# Check country codes\ndata(\"countries\")\nhead(countries)\n\n  country_code sub_code        name\n1           AF     &lt;NA&gt; AFGHANISTAN\n2           AF   AF-BDS  BADAKHSHAN\n3           AF   AF-BDG     BADGHIS\n4           AF   AF-BGL     BAGHLAN\n5           AF   AF-BAL       BALKH\n6           AF   AF-BAM      BAMIAN\n\n\n\n\n\n(3). What are the differences between the two methods?\nThe Google Trends website offers a user-friendly interface for manual data collection via CSV downloads, making it suitable for casual use, but it has limitations in flexibility, automation, and precision. In contrast, the gtrendsR package in R provides programmatic API access, allowing automated, reproducible data collection with greater flexibility in parameter adjustments and time range specifications. While the website requires additional data cleaning and is less suited for systematic research, gtrendsR delivers data directly as R objects, making it more efficient for thorough data analysis in research projects."
  }
]